options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: default
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: QAM
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: excess_bw
  id: variable
  parameters:
    comment: '[excessive bandwidth] for cosine filter'
    value: '0.35'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 168.0]
    rotation: 0
    state: enabled
- name: nfilts
  id: variable
  parameters:
    comment: The [number] of [Synchronized Filter Bank]
    value: '32'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1288, 112.0]
    rotation: 0
    state: enabled
- name: qam16
  id: variable_constellation
  parameters:
    comment: ''
    const_points: '[-1-1j, -1+1j, 1+1j, 1-1j]'
    dims: '1'
    normalization: digital.constellation.AMPLITUDE_NORMALIZATION
    npwr: '1.0'
    precision: '8'
    rot_sym: '4'
    soft_dec_lut: None
    sym_map: '[0, 1, 3, 2]'
    type: 16qam
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [240, 360.0]
    rotation: 0
    state: true
- name: rrc_taps
  id: variable
  parameters:
    comment: ''
    value: firdes.root_raised_cosine(1, sps, 1, excess_bw, 45)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1400, 552.0]
    rotation: 0
    state: enabled
- name: rrc_taps_sync
  id: variable
  parameters:
    comment: ''
    value: firdes.root_raised_cosine(nfilts, nfilts, 1.0/float(sps), excess_bw, 11*sps*nfilts)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1144, 40.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: "\u91C7\u6837\u7387\uFF0832ksps\uFF09"
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1688, 120.0]
    rotation: 0
    state: enabled
- name: sps
  id: variable
  parameters:
    comment: The [number of samples] for every symbol
    value: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1344, 48.0]
    rotation: 0
    state: enabled
- name: analog_random_source_x_0
  id: analog_random_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    max: '256'
    maxoutbuf: '0'
    min: '0'
    minoutbuf: '0'
    num_samps: '1024'
    repeat: 'True'
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 208.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_mag_0
  id: blocks_complex_to_mag
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [800, 608.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_mag_1
  id: blocks_complex_to_mag
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [600, 496.0]
    rotation: 0
    state: enabled
- name: blocks_float_to_complex_0
  id: blocks_float_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [984, 520.0]
    rotation: 0
    state: enabled
- name: blocks_throttle_0_0_0_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 256.0]
    rotation: 0
    state: enabled
- name: digital_constellation_modulator_0_0_0_0
  id: digital_constellation_modulator
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: qam16
    differential: 'False'
    excess_bw: excess_bw
    log: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_symbol: sps
    truncate: 'False'
    verbose: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [240, 264.0]
    rotation: 0
    state: enabled
- name: digital_pfb_clock_sync_xxx_0_1_0
  id: digital_pfb_clock_sync_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    filter_size: nfilts
    init_phase: nfilts/2
    loop_bw: 6.28/100.0
    max_dev: '1.5'
    maxoutbuf: '0'
    minoutbuf: '0'
    osps: '1'
    sps: sps
    taps: rrc_taps_sync
    type: ccf
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1128, 192.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    A_sat: '1.0'
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n \nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\"\n    \"\"\"\n    Simple Rapp\
      \ model PA:\n        y = x / (1 + (|x|/A_sat)^(2*p))^(1/(2*p))\n    When p \u2192\
      \ \u221E \u5C31\u53D8\u6210\u786C\u9650\u5E45\uFF1Bp \u8D8A\u5C0F\u8F6C\u6298\
      \u8D8A\u5706\u6ED1\n    \"\"\"\n    def __init__(self, A_sat=1.0, p=2.0):  #\
      \ only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='PA_model_Rapp',   # will show up in GRC\n     \
      \       in_sig=[np.complex64],\n            out_sig=[np.complex64]\n       \
      \ )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.A_sat\
      \ = A_sat\n        self.p = p\n\n    def work(self, input_items, output_items):\n\
      \        x = input_items[0]\n        y = x / (1.0 + (np.abs(x)/self.A_sat)**(2.0*self.p))**(1.0/(2.0*self.p))\n\
      \        output_items[0][:] = y\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    p: '3'
  states:
    _io_cache: "('PA_model_Rapp', 'blk', [('A_sat', '1.0'), ('p', '2.0')], [('0',\
      \ 'complex', 1)], [('0', 'complex', 1)], '\\nSimple Rapp model PA:\\n    y =\
      \ x / (1 + (|x|/A_sat)^(2*p))^(1/(2*p))\\nWhen p \u2192 \u221E \u5C31\u53D8\u6210\
      \u786C\u9650\u5E45\uFF1Bp \u8D8A\u5C0F\u8F6C\u6298\u8D8A\u5706\u6ED1\\n', ['A_sat',\
      \ 'p'])"
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [688, 280.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      import torch\nfrom gnuradio import gr\nimport torch.nn as nn\n\nclass DGRU(nn.Module):\n\
      \    def __init__(self, hidden_size, output_size, num_layers, bidirectional=False,\
      \ batch_first=True,\n                 bias=True):\n        super(DGRU, self).__init__()\n\
      \        self.hidden_size = hidden_size\n        self.input_size = 6\n     \
      \   self.output_size = output_size\n        self.num_layers = num_layers\n \
      \       self.bidirectional = bidirectional\n        self.batch_first = batch_first\n\
      \        self.bias = bias\n\n        # Instantiate NN Layers\n        self.rnn\
      \ = nn.GRU(input_size=self.input_size,\n                          hidden_size=hidden_size,\n\
      \                          num_layers=num_layers,\n                        \
      \  bidirectional=self.bidirectional,\n                          batch_first=self.batch_first,\n\
      \                          bias=self.bias)\n        self.fc_out = nn.Linear(in_features=hidden_size\
      \ + self.input_size,\n                                out_features=self.output_size,\n\
      \                                bias=self.bias)\n        self.fc_hid = nn.Linear(in_features=hidden_size,\n\
      \                                out_features=hidden_size,\n               \
      \                 bias=self.bias)\n\n    def reset_parameters(self):\n     \
      \   for name, param in self.rnn.named_parameters():\n            num_gates =\
      \ int(param.shape[0] / self.hidden_size)\n            if 'bias' in name:\n \
      \               nn.init.constant_(param, 0)\n            if 'weight' in name:\n\
      \                for i in range(0, num_gates):\n                    nn.init.orthogonal_(param[i\
      \ * self.hidden_size:(i + 1) * self.hidden_size, :])\n            if 'weight_ih_l0'\
      \ in name:\n                for i in range(0, num_gates):\n                \
      \    nn.init.xavier_uniform_(param[i * self.hidden_size:(i + 1) * self.hidden_size,\
      \ :])\n\n        for name, param in self.fc_out.named_parameters():\n      \
      \      if 'weight' in name:\n                nn.init.xavier_uniform_(param)\n\
      \            if 'bias' in name:\n                nn.init.constant_(param, 0)\n\
      \n        for name, param in self.fc_hid.named_parameters():\n            if\
      \ 'weight' in name:\n                nn.init.kaiming_uniform_(param)\n     \
      \       if 'bias' in name:\n                nn.init.constant_(param, 0)\n\n\
      \    def forward(self, x, h_0):\n        # Feature Extraction\n        i_x =\
      \ torch.unsqueeze(x[..., 0], dim=-1)\n        q_x = torch.unsqueeze(x[..., 1],\
      \ dim=-1)\n        amp2 = torch.pow(i_x, 2) + torch.pow(q_x, 2)\n        amp\
      \ = torch.sqrt(amp2)\n        amp3 = torch.pow(amp, 3)\n        cos = i_x /\
      \ amp\n        sin = q_x / amp\n        x = torch.cat((i_x, q_x, amp, amp3,\
      \ sin, cos), dim=-1)\n        # Regressor\n        out, _ = self.rnn(x, h_0)\n\
      \        out = torch.relu(self.fc_hid(out))\n        out = torch.cat((out, x),\
      \ dim=-1)\n        out = self.fc_out(out)\n        return out\n        \nclass\
      \ CoreModel(nn.Module):\n    def __init__(self, input_size, hidden_size, num_layers,\
      \ backbone_type, window_size=None, num_dvr_units=None, thx=0, thh=0):\n    \
      \    super(CoreModel, self).__init__()\n        self.output_size = 2  # PA outputs:\
      \ I & Q\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n\
      \        self.num_layers = num_layers\n        self.backbone_type = backbone_type\n\
      \        self.thx = thx\n        self.thh = thh\n        self.window_size =\
      \ window_size\n        self.num_dvr_units = num_dvr_units\n        self.batch_first\
      \ = True  # Force batch first\n        self.bidirectional = False\n        self.bias\
      \ = True\n\n        if backbone_type == 'dgru':\n           # from backbones.dgru\
      \ import DGRU\n           self.backbone = DGRU(hidden_size=self.hidden_size,\n\
      \                                output_size=self.output_size,\n           \
      \                     num_layers=self.num_layers,\n                        \
      \        bidirectional=self.bidirectional,\n                               \
      \ batch_first=self.batch_first,\n                                bias=self.bias)\n\
      \        else:\n            raise ValueError(f\"The backbone type '{self.backbone_type}'\
      \ is not supported. Please add your own \"\n                             f\"\
      backbone under ./backbones and update models.py accordingly.\")\n\n        #\
      \ Initialize backbone parameters\n        try:\n            self.backbone.reset_parameters()\n\
      \            print(\"Backbone Initialized...\")\n        except AttributeError:\n\
      \            pass\n\n    def forward(self, x, h_0=None):\n        device = x.device\n\
      \        batch_size = x.size(0)  # NOTE: dim of x must be (batch, time, feat)/(N,\
      \ T, F)\n\n        if h_0 is None:  # Create initial hidden states if necessary\n\
      \            h_0 = torch.zeros(self.num_layers, batch_size, self.hidden_size).to(device)\n\
      \n        # Forward Propagate through the RNN\n        out = self.backbone(x,\
      \ h_0)\n\n        return out\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n    \"\"\"Apply DPD model to input\
      \ complex samples\"\"\"\n    def __init__(self, model_path='C:\\Programming\\\
      pythonProjects\\QAM-In-GNU-Radio-main\\Rapp_PA_GNU-Radio\\DPD_S_0_M_DGRU_H_15_F_200_P_1319.pt'):\n\
      \        gr.sync_block.__init__(\n            self,\n            name='DPD_model',\n\
      \            in_sig=[np.complex64],\n            out_sig=[np.complex64]\n  \
      \      )\n        model_path = 'C:\\Programming\\pythonProjects\\QAM-In-GNU-Radio-main\\\
      Rapp_PA_GNU-Radio\\DPD_S_0_M_DGRU_H_15_F_200_P_1319.pt'\n        self.model_path\
      \ = model_path\n        self.device = torch.device('cuda' if torch.cuda.is_available()\
      \ else 'cpu')\n\n        # Instantiate network with known architecture\n   \
      \     self.net = CoreModel(\n            input_size=2,\n            hidden_size=15,\n\
      \            num_layers=1,\n            backbone_type='dgru'\n        )\n  \
      \      # Load pretrained parameters\n        state_dict = torch.load(self.model_path,\
      \ map_location=self.device)\n        self.net.load_state_dict(state_dict)\n\
      \        self.net.eval()\n        self.net.to(self.device)\n\n    def work(self,\
      \ input_items, output_items):\n        x = input_items[0]\n        # Convert\
      \ complex data to (N, 2) real-imag tensor\n        x_np = np.vstack((x.real,\
      \ x.imag)).T.astype(np.float32)\n        x_tensor = torch.from_numpy(x_np).unsqueeze(0).to(self.device)\n\
      \        with torch.no_grad():\n            y = self.net(x_tensor).cpu().numpy()[0]\n\
      \        output_items[0][:] = y[:, 0] + 1j * y[:, 1]\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    model_path: '''C:\Programming\pythonProjects\QAM-In-GNU-Radio-main\Rapp_PA_GNU-Radio\DPD_S_0_M_DGRU_H_15_F_200_P_1319.pt'''
  states:
    _io_cache: ('DPD_model', 'blk', [('model_path', "'C:\\\\Programming\\\\pythonProjects\\\\QAM-In-GNU-Radio-main\\\\Rapp_PA_GNU-Radio\\\\DPD_S_0_M_DGRU_H_15_F_200_P_1319.pt'")],
      [('0', 'complex', 1)], [('0', 'complex', 1)], 'Embedded Python Block example
      - a simple multiply const', ['model_path'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 288.0]
    rotation: 0
    state: enabled
- name: fir_filter_xxx_0_0_0_0
  id: fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_delay: '0'
    taps: rrc_taps
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1152, 344.0]
    rotation: 0
    state: enabled
- name: qtgui_const_sink_x_0
  id: qtgui_const_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '0'
    marker10: '0'
    marker2: '0'
    marker3: '0'
    marker4: '0'
    marker5: '0'
    marker6: '0'
    marker7: '0'
    marker8: '0'
    marker9: '0'
    name: '""'
    nconnections: '1'
    size: '1024'
    style1: '0'
    style10: '0'
    style2: '0'
    style3: '0'
    style4: '0'
    style5: '0'
    style6: '0'
    style7: '0'
    style8: '0'
    style9: '0'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    xmax: '2'
    xmin: '-2'
    ymax: '2'
    ymin: '-2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1240, 656.0]
    rotation: 0
    state: enabled
- name: qtgui_const_sink_x_0_0_0_0
  id: qtgui_const_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    color1: '"blue"'
    color10: '"red"'
    color2: '"red"'
    color3: '"red"'
    color4: '"red"'
    color5: '"red"'
    color6: '"red"'
    color7: '"red"'
    color8: '"red"'
    color9: '"red"'
    comment: ''
    grid: 'False'
    gui_hint: 3,2,1,1
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '0'
    marker10: '0'
    marker2: '0'
    marker3: '0'
    marker4: '0'
    marker5: '0'
    marker6: '0'
    marker7: '0'
    marker8: '0'
    marker9: '0'
    name: '""'
    nconnections: '1'
    size: '1024'
    style1: '0'
    style10: '0'
    style2: '0'
    style3: '0'
    style4: '0'
    style5: '0'
    style6: '0'
    style7: '0'
    style8: '0'
    style9: '0'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    xmax: '2'
    xmin: '-2'
    ymax: '2'
    ymin: '-2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1536, 184.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1240, 504.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_0_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '0.5'
    alpha10: '1.0'
    alpha2: '0.5'
    alpha3: '0.5'
    alpha4: '0.5'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'True'
    gui_hint: 3,0,1,2
    label1: ''
    label10: ''
    label2: ''
    label3: Re{RX}
    label4: Im{RX}
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"QAM16"'
    nconnections: '1'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_NORM
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '2'
    ymin: '-2'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1512, 384.0]
    rotation: 0
    state: enabled

connections:
- [analog_random_source_x_0, '0', digital_constellation_modulator_0_0_0_0, '0']
- [blocks_complex_to_mag_0, '0', blocks_float_to_complex_0, '1']
- [blocks_complex_to_mag_1, '0', blocks_float_to_complex_0, '0']
- [blocks_float_to_complex_0, '0', qtgui_const_sink_x_0, '0']
- [blocks_throttle_0_0_0_0, '0', digital_pfb_clock_sync_xxx_0_1_0, '0']
- [blocks_throttle_0_0_0_0, '0', fir_filter_xxx_0_0_0_0, '0']
- [blocks_throttle_0_0_0_0, '0', qtgui_freq_sink_x_0, '0']
- [digital_constellation_modulator_0_0_0_0, '0', blocks_complex_to_mag_1, '0']
- [digital_constellation_modulator_0_0_0_0, '0', epy_block_1, '0']
- [digital_pfb_clock_sync_xxx_0_1_0, '0', qtgui_const_sink_x_0_0_0_0, '0']
- [epy_block_0, '0', blocks_complex_to_mag_0, '0']
- [epy_block_0, '0', blocks_throttle_0_0_0_0, '0']
- [epy_block_1, '0', epy_block_0, '0']
- [fir_filter_xxx_0_0_0_0, '0', qtgui_time_sink_x_0_0_0_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.12.0
